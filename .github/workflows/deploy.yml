name: Deploy to Digital Ocean

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image_repo: ${{ steps.tag.outputs.image_repo }}
      image_tag:  ${{ steps.tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (builder)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compose lowercase image refs
        id: tag
        run: |
          OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          REPO=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')
          echo "image_repo=ghcr.io/$OWNER/$REPO" >> $GITHUB_OUTPUT
          echo "image_tag=ghcr.io/$OWNER/$REPO:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.tag.outputs.image_repo }}:latest
            ${{ steps.tag.outputs.image_tag }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to DigitalOcean droplet (compose)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          passphrase: ${{ secrets.DO_SSH_PASSPHRASE }}
          script_stop: true
          command_timeout: 60m # 60 minutes
          script: |
            set -e
            IMAGE="${{ needs.build-and-push.outputs.image_tag }}"

            echo "${{ secrets.DOCKER_REGISTRY_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

            docker pull "$IMAGE"

            docker stop listando-cms || true
            docker rm listando-cms || true

            docker run -d \
                --name listando-cms \
                --restart unless-stopped \
                -p 127.0.0.1:1337:1337 \
                -e HOST='${{ secrets.HOST }}' \
                -e PORT='${{ secrets.PORT }}' \
                -e APP_KEYS='${{ secrets.APP_KEYS }}' \
                -e API_TOKEN_SALT='${{ secrets.API_TOKEN_SALT }}' \
                -e ADMIN_JWT_SECRET='${{ secrets.ADMIN_JWT_SECRET }}' \
                -e TRANSFER_TOKEN_SALT='${{ secrets.TRANSFER_TOKEN_SALT }}' \
                -e ENCRYPTION_KEY='${{ secrets.ENCRYPTION_KEY }}' \
                -e DATABASE_CLIENT='${{ secrets.DATABASE_CLIENT }}' \
                -e DATABASE_HOST='${{ secrets.DATABASE_HOST }}' \
                -e DATABASE_PORT='${{ secrets.DATABASE_PORT }}' \
                -e DATABASE_NAME='${{ secrets.DATABASE_NAME }}' \
                -e DATABASE_USERNAME='${{ secrets.DATABASE_USERNAME }}' \
                -e DATABASE_PASSWORD='${{ secrets.DATABASE_PASSWORD }}' \
                -e DATABASE_SSL='${{ secrets.DATABASE_SSL }}' \
                -e DATABASE_FILENAME='${{ secrets.DATABASE_FILENAME }}' \
                -e JWT_SECRET='${{ secrets.JWT_SECRET }}' \
                -e DATABASE_CA='${{ secrets.DATABASE_CA }}' \
                "$IMAGE"

            docker image prune -af || true
