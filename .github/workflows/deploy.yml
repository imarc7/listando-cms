# .github/workflows/deploy.yml
name: Build & Deploy Strapi

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}   # ghcr.io/<owner>/<repo>
  REMOTE_DIR: /srv/strapi                        # where docker-compose.yml lives on the droplet
  GHCR_USER: ${{ github.repository_owner }}      # login to GHCR with repo owner

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (using your DOCKER_REGISTRY_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max
          build-args: |
            NODE_ENV=production

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to DigitalOcean over SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          passphrase: ${{ secrets.DO_SSH_PASSPHRASE }}
          script_stop: true
          script: |
            set -euo pipefail
            cd ${{ env.REMOTE_DIR }}

            # Ensure the droplet can pull from GHCR with the same token
            echo "${{ secrets.DOCKER_REGISTRY_TOKEN }}" | docker login ghcr.io -u "${{ env.GHCR_USER }}" --password-stdin

            # Pull and restart only the app service
            docker compose pull strapi
            docker compose up -d strapi

            # Optional cleanup
            docker image prune -f
