name: Deploy to Digital Ocean

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image_repo: ${{ steps.tag.outputs.image_repo }}
      image_tag:  ${{ steps.tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (builder)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compose lowercase image refs
        id: tag
        run: |
          OWNER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
          REPO=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')
          echo "image_repo=ghcr.io/$OWNER/$REPO" >> $GITHUB_OUTPUT
          echo "image_tag=ghcr.io/$OWNER/$REPO:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.tag.outputs.image_repo }}:latest
            ${{ steps.tag.outputs.image_tag }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to DigitalOcean droplet (compose)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          passphrase: ${{ secrets.DO_SSH_PASSPHRASE }}
          script_stop: true
          script: |
            set -euo pipefail
            PROJECT_DIR="/srv/strapi"
            IMAGE_REPO="${{ needs.build-and-push.outputs.image_repo }}"

            # Ensure compose dir exists (first run safety)
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"

            # Login to GHCR on the droplet (read:packages token)
            echo "${{ secrets.DOCKER_REGISTRY_TOKEN }}" | docker login ghcr.io -u "${{ github.repository_owner }}" --password-stdin

            # Pull the latest app image used by docker-compose.yml (should reference :latest)
            docker pull "${IMAGE_REPO}:latest" || true

            # If docker-compose.yml is present, update the app
            if [ -f docker-compose.yml ]; then
              docker compose pull strapi
              docker compose up -d strapi
            else
              echo "Missing docker-compose.yml in $PROJECT_DIR"
              exit 1
            fi

            # Keep disk tidy
            docker image prune -af || true
